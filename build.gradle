buildscript {
    repositories {
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:3.0.10"
        classpath "gradle.plugin.com.github.erdi.webdriver-binaries:webdriver-binaries-gradle-plugin:2.0"
        classpath "org.grails.plugins:hibernate5:7.0.0"
        classpath "org.grails.plugins:database-migration:3.1.0.RC1"

    }
}

version "0.1"
group "groovytest"


apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "war"
apply plugin: "groovy"
apply plugin: "org.grails.grails-web"
apply plugin: "com.bertramlabs.asset-pipeline"
apply plugin: "com.github.erdi.webdriver-binaries"
apply plugin: "org.grails.grails-gsp"

repositories {
    maven { url "https://repo.grails.org/grails/core" }
}

sourceSets {
    main {
        resources {
            srcDir 'grails-app/migrations'
        }
    }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {
    developmentOnly("org.springframework.boot:spring-boot-devtools")
    implementation("org.springframework.boot:spring-boot-starter-logging")
    implementation("org.springframework.boot:spring-boot-autoconfigure")
    //implementation group: 'org.codehaus.groovy', name: 'groovy-all', version: '3.0.3', ext: 'pom'
    implementation("org.grails:grails-core")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-starter-tomcat")
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation("org.grails:grails-web-boot")
    implementation("mysql:mysql-connector-java:8.0.20")
    implementation("org.grails:grails-logging")
    implementation("org.grails:grails-plugin-rest")
    implementation("org.grails:grails-plugin-databinding")
    implementation("org.grails:grails-plugin-i18n")
    implementation("org.grails:grails-plugin-services")
    implementation("org.grails.plugins:spring-security-core:4.0.0.M1")
    implementation("org.grails.plugins:spring-security-ui:4.0.0.M1")
    implementation("org.grails:grails-plugin-url-mappings")
    implementation("org.grails:grails-plugin-interceptors")
    implementation("org.grails.plugins:cache")
    implementation("org.grails.plugins:async")
    implementation("org.grails.plugins:scaffolding")
    implementation("org.grails.plugins:events")
    implementation("org.grails.plugins:gsp")
    implementation("org.grails.plugins:hibernate5")
    implementation("org.grails.plugins:database-migration:3.1.0.RC1")
    implementation("org.hibernate:hibernate-core:5.4.0.Final")
    implementation("org.liquibase:liquibase-core:3.8.9")
    implementation("org.liquibase.ext:liquibase-hibernate5:3.8")
    compileOnly("io.micronaut:micronaut-inject-groovy")
    console("org.grails:grails-console")
    profile("org.grails.profiles:web")
    runtime("com.bertramlabs.plugins:asset-pipeline-grails:3.0.10")
    runtime("org.glassfish.web:el-impl:2.1.2-b03")
    runtime("com.h2database:h2")
    runtime("org.apache.tomcat:tomcat-jdbc")
    runtime("javax.xml.bind:jaxb-api:2.3.0")
    testImplementation("org.grails:grails-gorm-testing-support")
    testImplementation("org.mockito:mockito-core")
    testImplementation("org.grails:grails-web-testing-support")
    testImplementation("org.grails.plugins:geb")
    testImplementation("org.seleniumhq.selenium:selenium-remote-driver:3.14.0")
    testImplementation("org.seleniumhq.selenium:selenium-api:3.14.0")
    testImplementation("org.seleniumhq.selenium:selenium-support:3.14.0")
    testRuntime("org.seleniumhq.selenium:selenium-chrome-driver:3.14.0")
    testRuntime("org.seleniumhq.selenium:selenium-firefox-driver:3.14.0")
}

bootRun {
    ignoreExitValue true
    jvmArgs(
            '-Dspring.output.ansi.enabled=always',
            '-noverify',
            '-XX:TieredStopAtLevel=1',
            '-Xmx1024m')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs = ['-Xmx1024m']
    }
}


assets {
    minifyJs = true
    minifyCss = true
}

webdriverBinaries {
    chromedriver '2.45.0'
    geckodriver '0.24.0'
}

tasks.withType(Test) {
    systemProperty "geb.env", System.getProperty('geb.env')
    systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
    systemProperty "webdriver.chrome.driver", System.getProperty('webdriver.chrome.driver')
    systemProperty "webdriver.gecko.driver", System.getProperty('webdriver.gecko.driver')
}
